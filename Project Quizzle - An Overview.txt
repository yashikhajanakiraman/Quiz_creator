Project Quizzle - An Overview

General Format:
1. Login / SignUp
2. Design a Quiz by specifying the number of questions
3. Attend the Quiz
4. Result will be given after the quiz


Teammates' Ideas:

1. Aakash Raj S

Theme color - 2 set of colors
Light and Dark Mode - Sun and moon icon - Can be changed accordingly.
Extra feature - A quiz pin which creator knows  - can give options such as play with code for the user to enter and access the quiz.

2. Yashikha 

Option for including/excluding Negative Marking

3. Sanjanaa S

Quiz is created first by user, then user can log in again, and can choose whether he/she is playing the already existing quiz or creating a new quiz.

4. Sanjana G


Timer - Whole Quiz


Overview about our project: 

1. A single user can create their own quizzes.
2. The same user can play those quizzes later.
3. Each question carries +5 points for correct answers.
4. The app stores scores, tracks progress, and saves all created quizzes.


Inputs 

1. User info: username / email / password (if login system)
2. Quiz details: quiz title, description, category, date created
3. Questions: question text, options (A, B, C, D), correct answer
4. User answers / game session: selected answers, points scored, total score, date attempted


Outputs 

1. All quizzes 
2. Questions when playing
3. Final score 
4. History of quizzes played (with scores)
5. My profile

How Data Is Used:

1. Login/Register -> Checks users table and verifies password. If verified, creates a session
2. Play Quiz -> Shows the questions from the backend. And it records user answers in a sep table
3. Score Calculation - Comparing the answer of user with the correct answer. If correct, adds the points. If not, considered incorrect
4. Storing Results - Saving score, the answers selected, no. of attempts, dateattended etc.
5. View History (if we are using it to show progress of the user)
6. Profile Page - User Info, No. of Attempts and Average Score (& also individual scores of a particular quiz)


Users Collection:

• The Users collection stores all the information about people who use the web app.
Each user document contains the basic details such as the name, email address, password, and profile photo link if available. Additionally, it also holds an array named previous_quizzes which stores the summary of all quizzes that the user has played in the past.

•Each entry in previous_quizzes includes the quiz ID, score obtained, and date played.
This allows the system to quickly retrieve and display a user’s quiz history without needing to access multiple collections.

Quizzes Collection:

•The Quizzes collection stores the main quiz content created by users or administrators.
Each quiz is stored as a single document that contains all its related information inside it — this includes the quiz title, category, creator ID, and the list of questions.

•Every quiz document has an array named questions. Each element in this array represents one question and contains:
the question text, a list of options (usually four choices), and the correct answer.

Attempts Collection:

The Attempts collection acts as a bridge that connects users with the quizzes they play.
Each attempt document represents a single play session of a user for a specific quiz.
It contains:

1. the user ID (indicating who played), 
2. the quiz ID (which quiz was played),
3. the final score, 
4. and an answers array containing each question ID, the user’s selected option, and whether it was correct or not.


How the Entities Are Linked:

1. The Users collection identifies who is interacting with the system.
2. The Quizzes collection holds what they are interacting with — the questions and options.
3. The Attempts collection records how they interacted — their performance, selected answers, and score.

Basic Mind Map:

User → starts quiz → Quiz loaded from DB
Quiz → played → Attempt created
Attempt → summary updated → User profile